{
  
    
        "post0": {
            "title": "Music Industry Sales",
            "content": "#collapse-hide import altair as alt import pandas as pd from altair_saver import save . . #collapse-hide df = pd.read_csv(&quot;MusicData.csv&quot;, parse_dates=[&quot;Year&quot;], thousands=&#39;,&#39;) df . . ﻿Format Metric Year Value Category . 0 CD | Units | 1973-01-01 | NaN | Physical | . 1 CD | Units | 1974-01-01 | NaN | Physical | . 2 CD | Units | 1975-01-01 | NaN | Physical | . 3 CD | Units | 1976-01-01 | NaN | Physical | . 4 CD | Units | 1977-01-01 | NaN | Physical | . ... ... | ... | ... | ... | ... | . 2088 Vinyl Single | Value (Adjusted) | 2015-01-01 | 6.205390 | Physical | . 2089 Vinyl Single | Value (Adjusted) | 2016-01-01 | 5.198931 | Physical | . 2090 Vinyl Single | Value (Adjusted) | 2017-01-01 | 6.339678 | Physical | . 2091 Vinyl Single | Value (Adjusted) | 2018-01-01 | 5.386197 | Physical | . 2092 Vinyl Single | Value (Adjusted) | 2019-01-01 | 6.795946 | Physical | . 2093 rows × 5 columns . #collapse-hide # Convert Value column to float so it can be used in Altair as quantitative measure df.astype({&quot;Value&quot;: &quot;float&quot;}) df[&quot;Value&quot;].dtype . . dtype(&#39;float64&#39;) . #collapse-hide # Check for leading or trailing whitespace in columns df.columns . . Index([&#39;﻿Format&#39;, &#39;Metric&#39;, &#39;Year&#39;, &#39;Value&#39;, &#39;Category&#39;], dtype=&#39;object&#39;) . #collapse-hide # Get an overview of the format which have been used df.groupby([&#39;﻿Format&#39;]).sum() . . Value . ﻿Format . 8 - Track 23640.469715 | . CD 305524.451086 | . CD Single 2446.015682 | . Cassette 102312.105824 | . Cassette Single 4177.126130 | . DVD Audio 84.535783 | . Download Album 12658.615697 | . Download Music Video 316.854561 | . Download Single 17199.061065 | . Kiosk 54.802373 | . LP/EP 94233.655807 | . Limited Tier Paid Subscription 2487.659115 | . Music Video (Physical) 10619.480336 | . On-Demand Streaming (Ad-Supported) 4159.447624 | . Other Ad-Supported Streaming 866.632070 | . Other Digital 77.586600 | . Other Tapes 230.180841 | . Paid Subscription 21731.722104 | . Ringtones &amp; Ringbacks 6216.661824 | . SACD 101.752622 | . SoundExchange Distributions 7413.514033 | . Synchronization 2566.364051 | . Vinyl Single 14629.378953 | . #collapse-hide # Create a new column which assigns groups to each format. These groups will be displayed in the stream chart def groups(row): if row[&quot;﻿Format&quot;] == &quot;8 - Track&quot;: val = &quot;8 - Track&quot; elif ( row[&quot;﻿Format&quot;] == &quot;Cassette&quot; or row[&quot;﻿Format&quot;] == &quot;Cassette Single&quot; or row[&quot;﻿Format&quot;] == &quot;Other Tapes&quot; ): val = &quot;Tape&quot; elif ( row[&quot;﻿Format&quot;] == &quot;CD&quot; or row[&quot;﻿Format&quot;] == &quot;CD Single&quot; or row[&quot;﻿Format&quot;] == &quot;DVD Audio&quot; ): val = &quot;CD&quot; elif ( row[&quot;﻿Format&quot;] == &quot;Download Album&quot; or row[&quot;﻿Format&quot;] == &quot;Download Music Video&quot; or row[&quot;﻿Format&quot;] == &quot;Download Single&quot; or row[&quot;﻿Format&quot;] == &quot;Kiosk&quot; ): val = &quot;Download&quot; elif ( row[&quot;﻿Format&quot;] == &quot;Music Video (Physical)&quot; or row[&quot;﻿Format&quot;] == &quot;Other Digital&quot; or row[&quot;﻿Format&quot;] == &quot;Music Video (Physical)&quot; or row[&quot;﻿Format&quot;] == &quot;Ringtones &amp; Ringbacks&quot; or row[&quot;﻿Format&quot;] == &quot;SACD&quot; or row[&quot;﻿Format&quot;] == &quot;SoundExchange Distributions&quot; or row[&quot;﻿Format&quot;] == &quot;Synchronization&quot; ): val = &quot;Other&quot; elif ( row[&quot;﻿Format&quot;] == &quot;Limited Tier Paid Subscription&quot; or row[&quot;﻿Format&quot;] == &quot;On-Demand Streaming (Ad-Supported)&quot; or row[&quot;﻿Format&quot;] == &quot;Other Ad-Supported Streaming&quot; or row[&quot;﻿Format&quot;] == &quot;Paid Subscription&quot; ): val = &quot;Stream&quot; else: val = &quot;Vinyl&quot; return val . . #collapse-hide df[&quot;Format group&quot;] = df.apply(groups, axis=1) df . . ﻿Format Metric Year Value Category Format group . 0 CD | Units | 1973-01-01 | NaN | Physical | CD | . 1 CD | Units | 1974-01-01 | NaN | Physical | CD | . 2 CD | Units | 1975-01-01 | NaN | Physical | CD | . 3 CD | Units | 1976-01-01 | NaN | Physical | CD | . 4 CD | Units | 1977-01-01 | NaN | Physical | CD | . ... ... | ... | ... | ... | ... | ... | . 2088 Vinyl Single | Value (Adjusted) | 2015-01-01 | 6.205390 | Physical | Vinyl | . 2089 Vinyl Single | Value (Adjusted) | 2016-01-01 | 5.198931 | Physical | Vinyl | . 2090 Vinyl Single | Value (Adjusted) | 2017-01-01 | 6.339678 | Physical | Vinyl | . 2091 Vinyl Single | Value (Adjusted) | 2018-01-01 | 5.386197 | Physical | Vinyl | . 2092 Vinyl Single | Value (Adjusted) | 2019-01-01 | 6.795946 | Physical | Vinyl | . 2093 rows × 6 columns . #collapse-hide # Check if all rows have been assigned groups df.groupby([&#39;Format group&#39;]).sum() . . Value . Format group . 8 - Track 23640.469715 | . CD 308055.002552 | . Download 30229.333696 | . Other 26995.359465 | . Stream 29245.460913 | . Tape 106719.412794 | . Vinyl 108863.034759 | . selection = alt.selection_multi(fields=[&quot;Format group&quot;], bind=&quot;legend&quot;) chart = alt.Chart(df).mark_area().configure_axis(grid=False).encode( alt.X(&quot;yearmonth(Year):T&quot;, title=&quot;&quot;, axis=alt.Axis(format=&quot;%Y&quot;, domain=False, tickSize=0)), alt.Y(&quot;sum(Value):Q&quot;, stack=&quot;center&quot;, axis=None), alt.Color( &quot;Format group:N&quot;, scale=alt.Scale( domain=[ &quot;8 - Track&quot;, &quot;CD&quot;, &quot;Vinyl&quot;, &quot;Tape&quot;, &quot;Other&quot;, &quot;Download&quot;, &quot;Stream&quot;, ], range=[&quot;#423e58&quot;, &quot;#d3587b&quot;, &quot;#6a3589&quot;, &quot;#9b478b&quot;, &quot;#ffae78&quot;, &quot;#f78972&quot;, &quot;#fbcd98&quot;], ), ), tooltip=[&quot;Format group&quot;, &quot;sum(Value):Q&quot;, &quot;year(Year):T&quot;], opacity=alt.condition(selection, alt.value(1), alt.value(0.2)), ).add_selection(selection) chart . chart.save(&quot;music_industry.html&quot;) .",
            "url": "https://lb930.github.io/Data-Science-Blog/jupyter/makeovermonday/altair/python/2020/05/25/Music-Industry-Sales.html",
            "relUrl": "/jupyter/makeovermonday/altair/python/2020/05/25/Music-Industry-Sales.html",
            "date": " • May 25, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lb930.github.io/Data-Science-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lb930.github.io/Data-Science-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}